Module à dévelloper : 
	Box Domotique : Raspberry (C++ ou Python)

	Module XPL -> Radio : (X10, Oregon, ...)
	Module XPL -> X10 : Envoie
	? Module XPL -> Oregon : Lecture capteur
	Module XPL -> Matériel : Commande de prise


Protocole :
	XPL -> UDP
	X10 -> Radio -> CPL
	Oregon -> Radio (http://www.connectingstuff.net/blog/decodage-protocole-oregon-arduino-1/)

Matériel des modules :
	CC3200 LaunchPad (C++)
	https://www.youtube.com/watch?v=-zBxRvkA6mc
	http://fr.rs-online.com/web/p/kits-de-developpement-pour-radio-frequence/8197420/
	http://www.ti.com/tool/cc3200-launchxl

Fonctionnalitées Client:
	Interface Web permettant la géstion de la domotique
		Création d'une API JSON en python pour la communication dynamique avec le client
			Ou
		Utilisation des websocket pour permettre la création d'une interface web dynamique lié au serveur domotique 
			Création du serveur en python
			Création des pages web en html / css / javascript / ...
			Dialogue en JSON entre les pages WEB et le serveur python

Fonctionnalitées de la box :
	Ajout des périphériques, noeud
	Envoi d'informations aux périphériques
	? Récéption d'informations des périphériques
	? Création de scénarios
	? Stockage des informations dans une base de données (Graphiques)
	Affichage des informations et des différents périphériques via l'interface WEB

Fonctionnalitées des modules :
	Choix du type de Noeud : X10, XPL, Oregon, ...
	Listage des périphériques du Noeud
	Transmission des messages aux périphériques
	Traitement des messages XPL recu

Réseau :
	Connexion de la box au réseau en ethernet
	Création d'un réseau wifi pour les modules et noeuds

	
Exemple XPL :
cmnd : Commande
trig : Evenement
stat : Statut
//Header
xpl-cmnd
{
hop=1
source=xpl-xplhal.mamaison//Box
target=acme-cm12.server//Noeud
}
//Content
control.basic //modifiable
{
command=on//Action (totalement modifiable)
device=b2//Objet dans le noeud
}

xpl-cmnd
{
    hop=1
    source=xpl-xplhal.myhouse
    target=acme-cm12.server
}
x10.basic
{
    command=dim
    device=a1
    level=75
}

http://blog.luisrei.com/articles/flaskrest.html


Creer un réseau wifi à partir du raspberry

Comment ajouter des périphériques à un réseau wifi existant ?


Site Web :
	Toutes les fonctionnalitées de l'API

noeud : bridge : pont
Création de l'API en python : 
	Identification : Login, Password
		Réponse : Clé
	Récupération liste des protocoles :
		Réponse : <(Nom)>
	Ajout d'un noeud : Nom, Protocole, IP LOCAL
		Réponse : <(Success Or Fail)>
	Récupération des noeuds :
		Réponse : <(Id, Nom, Protocole, IP LOCAL, Etat)>
	Suppresion d'un noeud : Id
		Réponse : <(Success Or Fail)>
	Récupération des capteurs et actionneurs
		Réponse : <(Id, Nom, Protocole, Type, Etat)>
	Ajout d'un capteur ou actionneur : Protocole, Nom, Type, Noeud
		Réponse : <(Success Or Fail)>
	Supression d'un capteur ou actionneur : Id
		Réponse : <(Success Or Fail)>
	Modification de l'état d'un actionneur : Nom, ON / OFF
		Réponse : <(Success Or Fail)>
	Reload du serveur
		Réponse : <(Success Or Fail)>

Base SQlite
	User (id, login, password)
	Protocole (id, name)
	Noeud (id, ip, id_protocole)
	Noeud_Protocole (id, id_noeud, id_protocole)
	Capteurs (id, id_noeud, id_protocole, data)
	Actionneurs (id, id_noeud, id_protocole)

Serveur python (UDP) :
	Lire la base SQLite
